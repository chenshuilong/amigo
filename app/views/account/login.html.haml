- provide :css, 'bootstrap'

= call_hook :view_account_login_top

%canvas#canvas{:style => "width: 100%; height: 880px; position: absolute;"}
.main-container
  .main-content
    .row
      .col-sm-10.col-sm-offset-1
        .login-container
          .center
            %h1
              %i.ace-icon.fa.fa-leaf.green
              %span.red
                = "#{Redmine::Info.app_name}"
              %span#id-text2.white
                = "项目管理系统"
            %h4#id-company-text.blue © 深圳市金立通讯设备有限公司
          .space-6
          .position-relative
            = form_tag(signin_path, onsubmit: 'return keepAnchorOnSignIn(this);') do
              = back_url_hidden_field_tag
              #login-box.login-box.visible.widget-box.no-border
                .widget-body
                  .widget-main
                    %h4.header.blue.lighter.bigger
                      %i.ace-icon.fa.fa-coffee.green
                      请输入用户名和密码
                    .space-6
                    %form
                      %fieldset
                        %label.block.clearfix
                          %span.block.input-icon.input-icon-right
                            = text_field_tag 'username', params[:username], :tabindex => '1', :class => 'form-control', :placeholder => '用户名'
                            %i.ace-icon.fa.fa-user
                        %label.block.clearfix
                          %span.block.input-icon.input-icon-right
                            = password_field_tag 'password', nil, :tabindex => '2', :class => 'form-control', :placeholder => '密码'
                            %i.ace-icon.fa.fa-lock
                        .space
                        .clearfix
                          %label.inline
                            - if Setting.autologin?
                              %label{:for => "autologin"}
                                = check_box_tag 'autologin', 1, false, :tabindex => 4, :class => 'ace'
                                %span.lbl= l(:label_stay_logged_in)
                          %button.width-35.pull-right.btn.btn-sm.btn-primary{:type => "submit"}
                            %i.ace-icon.fa.fa-key
                            %span.bigger-110 登录
                        .space-4
                    .social-or-login.center
                      %span.bigger-110 或采用以下方式登录
                    .space-6
                    .social-login.center
                      %a.btn.btn-primary
                        %i.ace-icon.fa.fa-weixin
                      %a.btn.btn-info
                        %i.ace-icon.fa.fa-qq
                      %a.btn.btn-danger
                        %i.ace-icon.fa.fa-google-plus
                  .toolbar.clearfix
                    %div
                      %a.forgot-password-link{"data-target" => "#forgot-box", :href => "#"}
                        %i.ace-icon.fa.fa-arrow-left
                        忘记密码
                    %div
                      %a.user-signup-link{"data-target" => "#signup-box", :href => "#"}
                        注册
                        %i.ace-icon.fa.fa-arrow-right
            #forgot-box.forgot-box.widget-box.no-border
              .widget-body
                .widget-main
                  %h4.header.red.lighter.bigger
                    %i.ace-icon.fa.fa-key
                    重新找回密码
                  .space-6
                  %p
                    输入您的电子邮件地址并会收到邮件提示
                  %form
                    %fieldset
                      %label.block.clearfix
                        %span.block.input-icon.input-icon-right
                          %input.form-control{:placeholder => "电子邮件地址", :type => "email"}/
                          %i.ace-icon.fa.fa-envelope
                      .clearfix
                        %button.width-35.pull-right.btn.btn-sm.btn-danger{:type => "button"}
                          %i.ace-icon.fa.fa-lightbulb-o
                          %span.bigger-110 发送给我!
                .toolbar.center
                  %a.back-to-login-link{"data-target" => "#login-box", :href => "#"}
                    返回登录
                    %i.ace-icon.fa.fa-arrow-right
            #signup-box.signup-box.widget-box.no-border
              .widget-body
                .widget-main
                  %h4.header.green.lighter.bigger
                    %i.ace-icon.fa.fa-users.blue
                    新用户注册
                  .space-6
                  %p 请输入注册信息:
                  %form
                    %fieldset
                      %label.block.clearfix
                        %span.block.input-icon.input-icon-right
                          %input.form-control{:placeholder => "电子邮件地址", :type => "email"}/
                          %i.ace-icon.fa.fa-envelope
                      %label.block.clearfix
                        %span.block.input-icon.input-icon-right
                          %input.form-control{:placeholder => "用户名", :type => "text"}/
                          %i.ace-icon.fa.fa-user
                      %label.block.clearfix
                        %span.block.input-icon.input-icon-right
                          %input.form-control{:placeholder => "密码", :type => "password"}/
                          %i.ace-icon.fa.fa-lock
                      %label.block.clearfix
                        %span.block.input-icon.input-icon-right
                          %input.form-control{:placeholder => "确认密码", :type => "password"}/
                          %i.ace-icon.fa.fa-retweet
                      %label.block
                        %input.ace{:type => "checkbox"}/
                        %span.lbl
                          我接受
                          %a{:href => "#"} 用户协议
                      .space-24
                      .clearfix
                        %button.width-30.pull-left.btn.btn-sm{:type => "reset"}
                          %i.ace-icon.fa.fa-refresh
                          %span.bigger-110 重置
                        %button.width-65.pull-right.btn.btn-sm.btn-success{:type => "button"}
                          %span.bigger-110 注册
                          %i.ace-icon.fa.fa-arrow-right.icon-on-right
                .toolbar.center
                  %a.back-to-login-link{"data-target" => "#login-box", :href => "#"}
                    %i.ace-icon.fa.fa-arrow-left
                    返回登录
          .navbar-fixed-top.align-right
            %br/
            \ 
            %a#btn-login-dark{:href => "#"} 纯黑
            \ 
            %span.blue /
            \ 
            %a#btn-login-blur{:href => "#"} 蓝色
            \ 
            %span.blue /
            \ 
            %a#btn-login-light{:href => "#"} 清新
            \     
= call_hook :view_account_login_bottom
- if params[:username].present?
  = javascript_tag "$('#password').focus();"
- else
  = javascript_tag "$('#username').focus();"

-#= call_hook :view_account_login_top
-##login-form
-#  = form_tag(signin_path, onsubmit: 'return keepAnchorOnSignIn(this);') do
-#    = back_url_hidden_field_tag
-#    %table
-#      %tr
-#        %td{:style => "text-align:right;"}
-#          %label{:for => "username"}
-#            = l(:field_login)
-#            \:
-#        %td{:style => "text-align:left;"}= text_field_tag 'username', params[:username], :tabindex => '1'
-#      %tr
-#        %td{:style => "text-align:right;"}
-#          %label{:for => "password"}
-#            = l(:field_password)
-#            \:
-#        %td{:style => "text-align:left;"}= password_field_tag 'password', nil, :tabindex => '2'
-#      - if Setting.openid?
-#        %tr
-#          %td{:style => "text-align:right;"}
-#            %label{:for => "openid_url"}= l(:field_identity_url)
-#          %td{:style => "text-align:left;"}= text_field_tag "openid_url", nil, :tabindex => '3'
-#      %tr
-#        %td
-#        %td{:style => "text-align:left;"}
-#          - if Setting.autologin?
-#            %label{:for => "autologin"}
-#              = check_box_tag 'autologin', 1, false, :tabindex => 4
-#              = l(:label_stay_logged_in)
-#      %tr
-#        %td{:style => "text-align:left;"}
-#          - if Setting.lost_password?
-#            = link_to l(:label_password_lost), lost_password_path
-#        %td{:style => "text-align:right;"}
-#          %input{:name => "login", :tabindex => "5", :type => "submit", :value => "#{l(:button_login)} »"}/
-#= call_hook :view_account_login_bottom
-#- if params[:username].present?
-#  = javascript_tag "$('#password').focus();"
-#- else
-#  = javascript_tag "$('#username').focus();"


:javascript
  jQuery(function($) {
   $(document).on('click', '.toolbar a[data-target]', function(e) {
      e.preventDefault();
      var target = $(this).data('target');
      $('.widget-box.visible').removeClass('visible');//hide others
      $(target).addClass('visible');//show target
   });
  });

  /*
    每隔一秒钟换一种主题
  */
  /*
  var themes = [{zt_klass1: "login-layout", zt_klass2: "white", zt_klass3: "blue"},
                {zt_klass1: "login-layout light-login", zt_klass2: "grey", zt_klass3: "blue"},
                {zt_klass1: "login-layout blur-login", zt_klass2: "white", zt_klass3: "light-blue"}];
  var recordCount = 1;
  jQuery(function($) {
    setInterval(function () {
        if (recordCount > 3)
          recordCount = recordCount % 3;
        var theme = themes[recordCount - 1];

        $('body').attr('class', theme.zt_klass1);
        $('#id-text2').attr('class', theme.zt_klass2);
        $('#id-company-text').attr('class', theme.zt_klass3);

        recordCount += 1;
    }, 1000);
  });
  */

  //you don't need this, just used for changing background
  jQuery(function($) {
   $('#btn-login-dark').on('click', function(e) {
      $('body').attr('class', 'login-layout');
      $('#id-text2').attr('class', 'white');
      $('#id-company-text').attr('class', 'blue');

      e.preventDefault();
   });
   $('#btn-login-light').on('click', function(e) {
      $('body').attr('class', 'login-layout light-login');
      $('#id-text2').attr('class', 'grey');
      $('#id-company-text').attr('class', 'blue');

      e.preventDefault();
   });
   $('#btn-login-blur').on('click', function(e) {
      $('body').attr('class', 'login-layout blur-login');
      $('#id-text2').attr('class', 'white');
      $('#id-company-text').attr('class', 'light-blue');

      e.preventDefault();
   });

  });

  if (randomRangeNumber(1,2) == 1) {
    function project3D(x, y, z, vars) {
      var p, d;
      x -= vars.camX;
      y -= vars.camY - 8;
      z -= vars.camZ;
      p = Math.atan2(x, z);
      d = Math.sqrt(x * x + z * z);
      x = Math.sin(p - vars.yaw) * d;
      z = Math.cos(p - vars.yaw) * d;
      p = Math.atan2(y, z);
      d = Math.sqrt(y * y + z * z);
      y = Math.sin(p - vars.pitch) * d;
      z = Math.cos(p - vars.pitch) * d;
      var rx1 = -1000;
      var ry1 = 1;
      var rx2 = 1000;
      var ry2 = 1;
      var rx3 = 0;
      var ry3 = 0;
      var rx4 = x;
      var ry4 = z;
      var uc = (ry4 - ry3) * (rx2 - rx1) - (rx4 - rx3) * (ry2 - ry1);
      var ua = ((rx4 - rx3) * (ry1 - ry3) - (ry4 - ry3) * (rx1 - rx3)) / uc;
      var ub = ((rx2 - rx1) * (ry1 - ry3) - (ry2 - ry1) * (rx1 - rx3)) / uc;
      if (!z) z = 0.000000001;
      if (ua > 0 && ua < 1 && ub > 0 && ub < 1) {
          return {
              x: vars.cx + (rx1 + ua * (rx2 - rx1)) * vars.scale,
              y: vars.cy + y / z * vars.scale,
              d: (x * x + y * y + z * z)
          };
      } else {
          return { d: -1 };
      }
    }


    function elevation(x, y, z) {
        var dist = Math.sqrt(x * x + y * y + z * z);
        if (dist && z / dist >= -1 && z / dist <= 1) return Math.acos(z / dist);
        return 0.00000001;
    }


    function rgb(col) {
        col += 0.000001;
        var r = parseInt((0.5 + Math.sin(col) * 0.5) * 16);
        var g = parseInt((0.5 + Math.cos(col) * 0.5) * 16);
        var b = parseInt((0.5 - Math.sin(col) * 0.5) * 16);
        return "#" + r.toString(16) + g.toString(16) + b.toString(16);
    }


    function interpolateColors(RGB1, RGB2, degree) {
        var w2 = degree;
        var w1 = 1 - w2;
        return [w1 * RGB1[0] + w2 * RGB2[0], w1 * RGB1[1] + w2 * RGB2[1], w1 * RGB1[2] + w2 * RGB2[2]];
    }


    function rgbArray(col) {
        col += 0.000001;
        var r = parseInt((0.5 + Math.sin(col) * 0.5) * 256);
        var g = parseInt((0.5 + Math.cos(col) * 0.5) * 256);
        var b = parseInt((0.5 - Math.sin(col) * 0.5) * 256);
        return [r, g, b];
    }


    function colorString(arr) {
        var r = parseInt(arr[0]);
        var g = parseInt(arr[1]);
        var b = parseInt(arr[2]);
        return "#" + ("0" + r.toString(16)).slice(-2) + ("0" + g.toString(16)).slice(-2) + ("0" + b.toString(16)).slice(-2);
    }


    function process(vars) {
        if (vars.points.length < vars.initParticles) for (var i = 0; i < 5; ++i) spawnParticle(vars);
        var p, d, t;

        p = Math.atan2(vars.camX, vars.camZ);
        d = Math.sqrt(vars.camX * vars.camX + vars.camZ * vars.camZ);
        d -= Math.sin(vars.frameNo / 80) / 25;
        t = Math.cos(vars.frameNo / 300) / 165;
        vars.camX = Math.sin(p + t) * d;
        vars.camZ = Math.cos(p + t) * d;
        vars.camY = -Math.sin(vars.frameNo / 220) * 15;
        vars.yaw = Math.PI + p + t;
        vars.pitch = elevation(vars.camX, vars.camZ, vars.camY) - Math.PI / 2;

        var t;
        for (var i = 0; i < vars.points.length; ++i) {
            x = vars.points[i].x;
            y = vars.points[i].y;
            z = vars.points[i].z;
            d = Math.sqrt(x * x + z * z) / 1.0075;
            t = .1 / (1 + d * d / 5);
            p = Math.atan2(x, z) + t;
            vars.points[i].x = Math.sin(p) * d;
            vars.points[i].z = Math.cos(p) * d;
            vars.points[i].y += vars.points[i].vy * t * ((Math.sqrt(vars.distributionRadius) - d) * 2);
            if (vars.points[i].y > vars.vortexHeight / 2 || d < .25) {
                vars.points.splice(i, 1);
                spawnParticle(vars);
            }
        }
    }

    function drawFloor(vars) {
        var x, y, z, d, point, a;
        for (var i = -25; i <= 25; i += 1) {
            for (var j = -25; j <= 25; j += 1) {
                x = i * 2;
                z = j * 2;
                y = vars.floor;
                d = Math.sqrt(x * x + z * z);
                point = project3D(x, y - d * d / 85, z, vars);
                if (point.d != -1) {
                    size = 1 + 15000 / (1 + point.d);
                    a = 0.15 - Math.pow(d / 50, 4) * 0.15;
                    if (a > 0) {
                        vars.ctx.fillStyle = colorString(interpolateColors(rgbArray(d / 26 - vars.frameNo / 40), [0, 128, 32], .5 + Math.sin(d / 6 - vars.frameNo / 8) / 2));
                        vars.ctx.globalAlpha = a;
                        vars.ctx.fillRect(point.x - size / 2, point.y - size / 2, size, size);
                    }
                }
            }
        }
        vars.ctx.fillStyle = "#82f";
        for (var i = -25; i <= 25; i += 1) {
            for (var j = -25; j <= 25; j += 1) {
                x = i * 2;
                z = j * 2;
                y = -vars.floor;
                d = Math.sqrt(x * x + z * z);
                point = project3D(x, y + d * d / 85, z, vars);
                if (point.d != -1) {
                    size = 1 + 15000 / (1 + point.d);
                    a = 0.15 - Math.pow(d / 50, 4) * 0.15;
                    if (a > 0) {
                        vars.ctx.fillStyle = colorString(interpolateColors(rgbArray(-d / 26 - vars.frameNo / 40), [32, 0, 128], .5 + Math.sin(-d / 6 - vars.frameNo / 8) / 2));
                        vars.ctx.globalAlpha = a;
                        vars.ctx.fillRect(point.x - size / 2, point.y - size / 2, size, size);
                    }
                }
            }
        }
    }

    function sortFunction(a, b) {
        return b.dist - a.dist;
    }

    function draw(vars) {
        vars.ctx.globalAlpha = .15;
        vars.ctx.fillStyle = "#000";
        vars.ctx.fillRect(0, 0, canvas.width, canvas.height);

        drawFloor(vars);

        var point, x, y, z, a;
        for (var i = 0; i < vars.points.length; ++i) {
            x = vars.points[i].x;
            y = vars.points[i].y;
            z = vars.points[i].z;
            point = project3D(x, y, z, vars);
            if (point.d != -1) {
                vars.points[i].dist = point.d;
                size = 1 + vars.points[i].radius / (1 + point.d);
                d = Math.abs(vars.points[i].y);
                a = .8 - Math.pow(d / (vars.vortexHeight / 2), 1000) * .8;
                vars.ctx.globalAlpha = a >= 0 && a <= 1 ? a : 0;
                vars.ctx.fillStyle = rgb(vars.points[i].color);
                if (point.x > -1 && point.x < vars.canvas.width && point.y > -1 && point.y < vars.canvas.height) vars.ctx.fillRect(point.x - size / 2, point.y - size / 2, size, size);
            }
        }
        vars.points.sort(sortFunction);
    }


    function spawnParticle(vars) {
        var p, ls;
        pt = {};
        p = Math.PI * 2 * Math.random();
        ls = Math.sqrt(Math.random() * vars.distributionRadius);
        pt.x = Math.sin(p) * ls;
        pt.y = -vars.vortexHeight / 2;
        pt.vy = vars.initV / 20 + Math.random() * vars.initV;
        pt.z = Math.cos(p) * ls;
        pt.radius = 200 + 800 * Math.random();
        pt.color = pt.radius / 1000 + vars.frameNo / 250;
        vars.points.push(pt);
    }

    function frame(vars) {
        if (vars === undefined) {
            var vars = {};
            vars.canvas = document.querySelector("canvas");
            vars.ctx = vars.canvas.getContext("2d");
            vars.canvas.width = document.body.clientWidth;
            vars.canvas.height = document.body.clientHeight;
            window.addEventListener("resize", function () {
                vars.canvas.width = document.body.clientWidth;
                vars.canvas.height = document.body.clientHeight;
                vars.cx = vars.canvas.width / 2;
                vars.cy = vars.canvas.height / 2;
            }, true);
            vars.frameNo = 0;

            vars.camX = 0;
            vars.camY = 0;
            vars.camZ = -14;
            vars.pitch = elevation(vars.camX, vars.camZ, vars.camY) - Math.PI / 2;
            vars.yaw = 0;
            vars.cx = vars.canvas.width / 2;
            vars.cy = vars.canvas.height / 2;
            vars.bounding = 10;
            vars.scale = 500;
            vars.floor = 26.5;

            vars.points = [];
            vars.initParticles = 700;
            vars.initV = .01;
            vars.distributionRadius = 800;
            vars.vortexHeight = 25;
        }

        vars.frameNo++;
        requestAnimationFrame(function () {
            frame(vars);
        });

        process(vars);
        draw(vars);
    }

    frame();
  } else {
    function initVars(){
      pi=Math.PI;
      ctx=canvas.getContext("2d");
      canvas.width=canvas.clientWidth;
      canvas.height=canvas.clientHeight;
      cx=canvas.width/2;
      cy=canvas.height/2;
      playerZ=-25;
      playerX=playerY=playerVX=playerVY=playerVZ=pitch=yaw=pitchV=yawV=0;
      scale=600;
      seedTimer=0;seedInterval=5,seedLife=100;gravity=.02;
      seeds=new Array();
      sparkPics=new Array();
      s="https://cantelope.org/NYE/";
      for(i=1;i<=10;++i){
          sparkPic=new Image();
          sparkPic.src=s+"spark"+i+".png";
          sparkPics.push(sparkPic);
      }
      sparks=new Array();
      pow1=new Audio(s+"pow1.ogg");
      pow2=new Audio(s+"pow2.ogg");
      pow3=new Audio(s+"pow3.ogg");
      pow4=new Audio(s+"pow4.ogg");
      frames = 0;
    }

    function rasterizePoint(x,y,z){
        var p,d;
        x-=playerX;
        y-=playerY;
        z-=playerZ;
        p=Math.atan2(x,z);
        d=Math.sqrt(x*x+z*z);
        x=Math.sin(p-yaw)*d;
        z=Math.cos(p-yaw)*d;
        p=Math.atan2(y,z);
        d=Math.sqrt(y*y+z*z);
        y=Math.sin(p-pitch)*d;
        z=Math.cos(p-pitch)*d;
        var rx1=-1000,ry1=1,rx2=1000,ry2=1,rx3=0,ry3=0,rx4=x,ry4=z,uc=(ry4-ry3)*(rx2-rx1)-(rx4-rx3)*(ry2-ry1);
        if(!uc) return {x:0,y:0,d:-1};
        var ua=((rx4-rx3)*(ry1-ry3)-(ry4-ry3)*(rx1-rx3))/uc;
        var ub=((rx2-rx1)*(ry1-ry3)-(ry2-ry1)*(rx1-rx3))/uc;
        if(!z)z=.000000001;
        if(ua>0&&ua<1&&ub>0&&ub<1){
            return {
                x:cx+(rx1+ua*(rx2-rx1))*scale,
                y:cy+y/z*scale,
                d:Math.sqrt(x*x+y*y+z*z)
            };
        }else{
            return {
                x:cx+(rx1+ua*(rx2-rx1))*scale,
                y:cy+y/z*scale,
                d:-1
            };
        }
    }

    function spawnSeed(){
        seed=new Object();
        seed.x=-50+Math.random()*100;
        seed.y=25;
        seed.z=-50+Math.random()*100;
        seed.vx=.1-Math.random()*.2;
        seed.vy=-1.5;//*(1+Math.random()/2);
        seed.vz=.1-Math.random()*.2;
        seed.born=frames;
        seeds.push(seed);
    }

    function splode(x,y,z){
        t=5+parseInt(Math.random()*150);
        sparkV=1+Math.random()*2.5;
        type=parseInt(Math.random()*3);
        switch(type){
            case 0:
                pic1=parseInt(Math.random()*10);
                break;
            case 1:
                pic1=parseInt(Math.random()*10);
                do{ pic2=parseInt(Math.random()*10); }while(pic2==pic1);
                break;
            case 2:
                pic1=parseInt(Math.random()*10);
                do{ pic2=parseInt(Math.random()*10); }while(pic2==pic1);
                do{ pic3=parseInt(Math.random()*10); }while(pic3==pic1 || pic3==pic2);
                break;
        }
        for(m=1;m<t;++m){
            spark=new Object();
            spark.x=x; spark.y=y; spark.z=z;
            p1=pi*2*Math.random();
            p2=pi*Math.random();
            v=sparkV*(1+Math.random()/6)
            spark.vx=Math.sin(p1)*Math.sin(p2)*v;
            spark.vz=Math.cos(p1)*Math.sin(p2)*v;
            spark.vy=Math.cos(p2)*v;
            switch(type){
                case 0: spark.img=sparkPics[pic1]; break;
                case 1:
                    spark.img=sparkPics[parseInt(Math.random()*2)?pic1:pic2];
                    break;
                case 2:
                    switch(parseInt(Math.random()*3)){
                        case 0: spark.img=sparkPics[pic1]; break;
                        case 1: spark.img=sparkPics[pic2]; break;
                        case 2: spark.img=sparkPics[pic3]; break;
                    }
                    break;
            }
            spark.radius=25+Math.random()*50;
            spark.alpha=1;
            spark.trail=new Array();
            sparks.push(spark);
        }
        switch(parseInt(Math.random()*4)){
            case 0:	pow=new Audio(s+"pow1.ogg"); break;
            case 1:	pow=new Audio(s+"pow2.ogg"); break;
            case 2:	pow=new Audio(s+"pow3.ogg"); break;
            case 3:	pow=new Audio(s+"pow4.ogg"); break;
        }
        d=Math.sqrt((x-playerX)*(x-playerX)+(y-playerY)*(y-playerY)+(z-playerZ)*(z-playerZ));
        pow.volume=1.5/(1+d/10);
        pow.play();
    }

    function doLogic(){
        if(seedTimer<frames){
            seedTimer=frames+seedInterval*Math.random()*10;
            spawnSeed();
        }
        for(i=0;i<seeds.length;++i){
            seeds[i].vy+=gravity;
            seeds[i].x+=seeds[i].vx;
            seeds[i].y+=seeds[i].vy;
            seeds[i].z+=seeds[i].vz;
            if(frames-seeds[i].born>seedLife){
                splode(seeds[i].x,seeds[i].y,seeds[i].z);
                seeds.splice(i,1);
            }
        }
        for(i=0;i<sparks.length;++i){
            if(sparks[i].alpha>0 && sparks[i].radius>5){
                sparks[i].alpha-=.01;
                sparks[i].radius/=1.02;
                sparks[i].vy+=gravity;
                point=new Object();
                point.x=sparks[i].x;
                point.y=sparks[i].y;
                point.z=sparks[i].z;
                if(sparks[i].trail.length){
                    x=sparks[i].trail[sparks[i].trail.length-1].x;
                    y=sparks[i].trail[sparks[i].trail.length-1].y;
                    z=sparks[i].trail[sparks[i].trail.length-1].z;
                    d=((point.x-x)*(point.x-x)+(point.y-y)*(point.y-y)+(point.z-z)*(point.z-z));
                    if(d>9){
                        sparks[i].trail.push(point);
                    }
                }else{
                    sparks[i].trail.push(point);
                }
                if(sparks[i].trail.length>5)sparks[i].trail.splice(0,1);
                sparks[i].x+=sparks[i].vx;
                sparks[i].y+=sparks[i].vy;
                sparks[i].z+=sparks[i].vz;
                sparks[i].vx/=1.075;
                sparks[i].vy/=1.075;
                sparks[i].vz/=1.075;
            }else{
                sparks.splice(i,1);
            }
        }
        p=Math.atan2(playerX,playerZ);
        d=Math.sqrt(playerX*playerX+playerZ*playerZ);
        d+=Math.sin(frames/80)/1.25;
        t=Math.sin(frames/200)/40;
        playerX=Math.sin(p+t)*d;
        playerZ=Math.cos(p+t)*d;
        yaw=pi+p+t;
    }

    function rgb(col){
        var r = parseInt((.5+Math.sin(col)*.5)*16);
        var g = parseInt((.5+Math.cos(col)*.5)*16);
        var b = parseInt((.5-Math.sin(col)*.5)*16);
        return "#"+r.toString(16)+g.toString(16)+b.toString(16);
    }

    function draw(){
        ctx.clearRect(0,0,cx*2,cy*2);

        ctx.fillStyle="#ff8";
        for(i=-100;i<100;i+=3){
            for(j=-100;j<100;j+=4){
                x=i;z=j;y=25;
                point=rasterizePoint(x,y,z);
                if(point.d!=-1){
                    size=250/(1+point.d);
                    d = Math.sqrt(x * x + z * z);
                    a = 0.75 - Math.pow(d / 100, 6) * 0.75;
                    if(a>0){
                        ctx.globalAlpha = a;
                        ctx.fillRect(point.x-size/2,point.y-size/2,size,size);
                    }
                }
            }
        }
        ctx.globalAlpha=1;
        for(i=0;i<seeds.length;++i){
            point=rasterizePoint(seeds[i].x,seeds[i].y,seeds[i].z);
            if(point.d!=-1){
                size=200/(1+point.d);
                ctx.fillRect(point.x-size/2,point.y-size/2,size,size);
            }
        }
        point1=new Object();
        for(i=0;i<sparks.length;++i){
            point=rasterizePoint(sparks[i].x,sparks[i].y,sparks[i].z);
            if(point.d!=-1){
                size=sparks[i].radius*200/(1+point.d);
                if(sparks[i].alpha<0)sparks[i].alpha=0;
                if(sparks[i].trail.length){
                    point1.x=point.x;
                    point1.y=point.y;
                    switch(sparks[i].img){
                        case sparkPics[0]:ctx.strokeStyle="#f84";break;
                        case sparkPics[1]:ctx.strokeStyle="#84f";break;
                        case sparkPics[2]:ctx.strokeStyle="#8ff";break;
                        case sparkPics[3]:ctx.strokeStyle="#fff";break;
                        case sparkPics[4]:ctx.strokeStyle="#4f8";break;
                        case sparkPics[5]:ctx.strokeStyle="#f44";break;
                        case sparkPics[6]:ctx.strokeStyle="#f84";break;
                        case sparkPics[7]:ctx.strokeStyle="#84f";break;
                        case sparkPics[8]:ctx.strokeStyle="#fff";break;
                        case sparkPics[9]:ctx.strokeStyle="#44f";break;
                    }
                    for(j=sparks[i].trail.length-1;j>=0;--j){
                        point2=rasterizePoint(sparks[i].trail[j].x,sparks[i].trail[j].y,sparks[i].trail[j].z);
                        if(point2.d!=-1){
                            ctx.globalAlpha=j/sparks[i].trail.length*sparks[i].alpha/2;
                            ctx.beginPath();
                            ctx.moveTo(point1.x,point1.y);
                            ctx.lineWidth=1+sparks[i].radius*10/(sparks[i].trail.length-j)/(1+point2.d);
                            ctx.lineTo(point2.x,point2.y);
                            ctx.stroke();
                            point1.x=point2.x;
                            point1.y=point2.y;
                        }
                    }
                }
                ctx.globalAlpha=sparks[i].alpha;
                ctx.drawImage(sparks[i].img,point.x-size/2,point.y-size/2,size,size);
            }
        }
    }

    window.addEventListener("resize", function(){
        canvas.width=canvas.clientWidth;
        canvas.height=canvas.clientHeight;
        cx=canvas.width/2;
        cy=canvas.height/2;
    }, true);

    function frame(){
        if(frames>100000){
            seedTimer=0;
            frames=0;
        }
        frames++;
        draw();
        doLogic();
        requestAnimationFrame(frame);
    }

    initVars();
    frame();
  }
