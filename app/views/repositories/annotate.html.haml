= call_hook(:view_repositories_show_contextual, { :repository => @repository, :project => @project })
.contextual
  = render :partial => 'navigation'
%h2= render :partial => 'breadcrumbs', :locals => { :path => @path, :kind => 'file', :revision => @rev }
= render :partial => 'link_to_functions'
- colors = Hash.new {|k,v| k[v] = (k.size % 12) }
.autoscroll
  %table.filecontent.annotate.syntaxhl
    %tbody
      - line_num = 1; previous_revision = nil
      - syntax_highlight_lines(@path, Redmine::CodesetUtil.to_utf8_by_setting(@annotate.content)).each do |line|
        - revision = @annotate.revisions[line_num - 1]
        %tr{:class => "bloc-#{revision.nil? ? 0 : colors[revision.identifier || revision.revision]}", :id => "L#{line_num}"}
          %th.line-num
            %a{:href => "#L#{line_num}"}= line_num
          %td.revision
            - if revision && revision != previous_revision
              = revision.identifier ?                                               |
                link_to_revision(revision, @repository) : format_revision(revision) |
          %td.author
            - if revision && revision != previous_revision
              - author = Redmine::CodesetUtil.to_utf8(revision.author.to_s,
              - @repository.repo_log_encoding)
              = author.split('<').first
          %td.line-code
            %pre= line.html_safe
        - line_num += 1; previous_revision = revision
- html_title(l(:button_annotate))
- content_for :header_tags do
  = stylesheet_link_tag 'scm'
