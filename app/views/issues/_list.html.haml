= form_tag({}) do
  = hidden_field_tag 'back_url', url_for(params), :id => nil
  .autoscroll
    %table#issueTable{:class => "list issues #{sort_css_classes}  table table-striped table-bordered"}
      %thead
        %tr
          %th.hide-when-print
            = check_box_tag 'check_all', '', false, :class => 'toggle-selection', |
              :title => "#{l(:button_check_all)}/#{l(:button_uncheck_all)}"
          - query.inline_columns.each do |column|
            = column_header(column)
      %tbody
        - grouped_issue_list(issues, @query, @issue_count_by_group) do |issue, level, group_name, group_count, group_totals|
          - if group_name
            - reset_cycle
            %tr.group.open
              %td{:colspan => query.inline_columns.size + 1}
                %span.expander{:onclick => "toggleRowGroup(this);"} &nbsp;
                %span.name= group_name
                %span.count= group_count
                %span.totals= group_totals
                = link_to_function("#{l(:button_collapse_all)}/#{l(:button_expand_all)}", |
                  "toggleAllRowGroups(this)", :class => 'toggle-all')
          %tr{:class => "hascontextmenu #{issue.css_classes} #{level > 0 ? "idnt idnt-#{level}" : nil}", :id => "issue-#{issue.id}"}
            %td.hide-when-print= check_box_tag("ids[]", issue.id, false, :id => nil)
            = raw query.inline_columns.map {|column| "<td class=\"#{column.css_classes} #{custom_priority_class(column, issue)}\">#{column_content(column, issue)}</td>"}.join
          - @query.block_columns.each do |column|
            - if (text = column_content(column, issue)) && text.present?
              %tr{:class => current_cycle}
                %td{:class => column.css_classes, :colspan => @query.inline_columns.size + 1}= text
